#/
# What is reported
# ~~~~~~~~~~~~~~~~
# Reports instances of SSU failures/recovery through their
# heartbeat. Up to one email is sent every minute, so errors can
# accumulate.
#
# Origin
# ~~~~~~
# **lmmon-aggregated.log**, which was generated from
# **lmmon-mount_report.log**, itself generated by
# */opt/xyratex/bin/cscli show_nodes*.
#
# Instances of logged strings
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ::
#
#   2013-02-07T18:34:08-06:00 snx11003n002 heartbeat: [39009]: WARN: node snx11003n003: is dead
#   2013-02-08T05:39:09-06:00 snx11003n002 heartbeat: [39009]: info: Heartbeat restart on node snx11003n003
#/

# Wait for 60 seconds before reporting the errors, so they can accumulate.
type= Single
continue=takenext
context = [SYSLOG_LOG && !HEARTBEAT_GONE]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d).*snx(\d.*)(n\d.*) heartbeat: .+ node snx(\d.*)(n\d.*): is dead
desc= Node is dead
action= create HEARTBEAT_GONE 60 (lcall %o -> ( sub { return $HEARTBEAT_GONE_count; } ) ; if %o (report _THIS %cmd "%{subject}: %o node(s) is/are dead" %list,%list_page)) ;\
        lcall %o -> ( sub { $HEARTBEAT_GONE_count = 0; } ) ;\
        add HEARTBEAT_GONE System:      %site %host, %mf ;\
        add HEARTBEAT_GONE Filesystem:  all ;\
        add HEARTBEAT_GONE Event:       Node(s) dead. ;\
        add HEARTBEAT_GONE Time:      $1 %Tmsg ;\
        add HEARTBEAT_GONE %t  --  %tmsg2 ;\
        add HEARTBEAT_GONE %{rule_info}heartbeat.sr ;\
        if %urlsr ( add HEARTBEAT_GONE %{urlsr}/heartbeat.sr.html ) ;\
        add HEARTBEAT_GONE From log file: $+{_inputsrc}%{N} ;\
        add HEARTBEAT_GONE %{N}

# Add a dead node to the list
type= Single
ptype= RegExp
context = [SYSLOG_LOG && HEARTBEAT_GONE]
pattern= (\d\d:\d\d:\d\d).*snx(\d.*)(n\d.*) heartbeat: .+ node snx(\d.*)(n\d.*): is dead
desc= Node is dead $4 $5
action= add HEARTBEAT_GONE $0 ;\
        lcall %o -> ( sub { ++$HEARTBEAT_GONE_count; } )



# Wait for 60 seconds before reporting the errors, so they can accumulate.
type= Single
continue=takenext
context = [SYSLOG_LOG && !HEARTBEAT_BACK]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d).*snx(\d.*)(n\d.*) heartbeat: .+ Heartbeat restart on node snx(\d.*)(n\d.*)
desc= Node back
action= create HEARTBEAT_BACK 60 (lcall %o -> ( sub { return $HEARTBEAT_BACK_count; } ) ; if %o (report _THIS %cmd "%{subject}: %o node(s) is/are back" %list,%list_page)) ;\
        lcall %o -> ( sub { $HEARTBEAT_BACK_count = 0; } ) ;\
        add HEARTBEAT_BACK System:      %site %host, %mf ;\
        add HEARTBEAT_BACK Filesystem:  all ;\
        add HEARTBEAT_BACK Event:       Node(s) back. ;\
        add HEARTBEAT_BACK Time:      $1 %Tmsg ;\
        add HEARTBEAT_BACK %t  --  %tmsg2 ;\
        add HEARTBEAT_BACK %{rule_info}heartbeat.sr ;\
        if %urlsr ( add HEARTBEAT_BACK %{urlsr}/heartbeat.sr.html ) ;\
        add HEARTBEAT_BACK From log file: $+{_inputsrc}%{N} ;\
        add HEARTBEAT_BACK %{N}

# Add a dead node to the list
type= Single
context = [SYSLOG_LOG && HEARTBEAT_BACK]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d).*snx(\d.*)(n\d.*) heartbeat: .+ Heartbeat restart on node snx(\d.*)(n\d.*)
desc= Node back $4 $5
action= add HEARTBEAT_BACK $0 ;\
        lcall %o -> ( sub { ++$HEARTBEAT_BACK_count; } )
