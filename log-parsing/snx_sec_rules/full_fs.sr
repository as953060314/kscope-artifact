#/
# What is reported
# ~~~~~~~~~~~~~~~~
# Report instances of filesystems that are at least 85% full, or that
# have 85% or more of their inodes used. Send up to one message per
# minute with a list of new filesystems above the threshold. If the
# error doesn't happen again for a filesystem (ie. the fs has been
# emptied), the error is considered fixed.
#
# Only one message per new error is sent.
#
# Origin
# ~~~~~~
# **lmmon-aggregated.log**, which was generated from
# **lmmon-dfi.log** and **lmmon-dfk.log**, themselves generated by
# *mount*.
#
# Instance of logged string
# ~~~~~~~~~~~~~~~~~~~~~~~~~
# ::
#
#   Fri Feb 22 17:48:15 2013: Partition /data/snx11003n026:md5 on node snx11003n027 is 91% full
#   Fri Feb 22 17:48:15 2013: Inodes on partition /var/lib/mdraidscripts on node snx11003n355 are 94% used
#/

type= single
continue=takenext
context = [AGGREGATED_LOG && !DF_FULL]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d) \d+: (Partition|Inodes on partition) (/.+) on node snx(\d.+)(n\d.+) (is|are)
desc= partition nearly full
action= create DF_FULL 60 (lcall %o -> (sub { $DF_FULL_count; }) ; if %o (report _THIS %cmd "%{subject}: %o partition(s) nearly full" %list)) ;\
        lcall %o -> ( sub { $DF_FULL_count = 0; } ) ;\
        add DF_FULL 1 day %wmsg ;\
        add DF_FULL System:      %site %host, %mf ;\
        add DF_FULL Filesystem:  %{fs} ;\
        add DF_FULL Event:       Partition nearly full. ;\
        add DF_FULL Time:      $1 %Tmsg ;\
        add DF_FULL %t  --  %tmsg2 ;\
        add DF_FULL %{rule_info}full_fs.sr ;\
        if %urlsr ( add DF_FULL %{urlsr}/full_fs.sr.html ) ;\
        add DF_FULL %{N} ;\
        add DF_FULL From log file: $+{_inputsrc}%{N} ;\
        add DF_FULL %{N}


# Create an event the first time we see it. If the event is not seen
# again for an hour, forget about it.
#
# Keep every error in $full_fs{}. The index is the sonexion name + the
# partition name + the type (space or inode)
#
# The first time the error happens, the whole string is stored in
# %full_fs (see action). A new error is generated in the DF_FULL
# context. When the error doesn't appear again in the next hour, it
# is considered cleared, and is removed (see action2)

type= SingleWith2Thresholds
context = [AGGREGATED_LOG && DF_FULL]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d) \d+: (Partition|Inodes on partition) (/.+) on node snx(\d.+)(n\d.+) (is|are)
desc= partition nearly full %{fs}$4$5 $3
action= lcall %o $2 $3 $4 $5 $0 -> ( sub { $full_fs{$_[2] . $_[3] . $_[1] . $_[0]} = $_[4]; } ) ;\
        add DF_FULL $0 ;\
        lcall %o -> ( sub { ++$DF_FULL_count; } )
window= 1
thresh= 1
desc2= partition not nearly full anymore %{fs}$4$5 $3
action2= lcall %o $2 $3 $4 $5 $0 -> ( sub { delete($full_fs{$_[2] . $_[3] . $_[1] . $_[0]}); } );
window2=3600
thresh2=0
