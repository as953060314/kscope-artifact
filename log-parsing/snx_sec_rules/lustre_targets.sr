#/
# What is reported
# ~~~~~~~~~~~~~~~~
# Reports OSSes with an unexpected number or targets. The usual number
# is 4. If an OSS has 0, then it has failed-over to the other OSS it
# is paired with. If it has 8, then the other OSS failed-over to it.
#
# The errors happening within one minute minute (which should be
# enough since it's coming from cscli show_nodes) will be aggregated
# into one email. Only one warning will be issued per new error. It
# will have (NEW) in the subject.
#
# Origin
# ~~~~~~
# **lmmon-mount_report.log**, generated by */opt/xyratex/bin/cscli show_nodes*.
#
# Instances of logged strings
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Detect when a new email may need to be created. This is the first significant line in *cscli show_nodes* output.
#
# Version 1.2::
#
#   Fri Feb 15 15:56:46 2013: snx11003n000      mgmt        on          -----       0 / 0       snx11003n001    -----
#
# Version 1.3.1::
#
#   Mon Apr 28 10:10:05 2014: snx11001n000      Mgmt        on          -----       0 / 0       snx11001n001    -----
#
# Version 2.0::
#
#   Wed Aug 24 15:30:26 2016:  snx11003n000  MGMT       On           -----          0 / 0    snx11003n001  -----
#
# This will generate one error.
#
# Version 1.2::
#
#   Fri Feb 15 15:56:46 2013: snx11003n118      oss         on          Stopped     0 / 4       snx11003n119    None
#
# Version 1.3.1::
#
#   Mon Apr 28 10:10:05 2014: snx11001n003    *MDS,*MGS       on              Stopped         0 / 1           snx11001n002    None
#
# Version 2.0::
#
#   Wed Aug 24 15:30:26 2016:  snx11003n003  MDS,(MGS)  On           Started        1 / 1    snx11003n002  Local
#   Wed Aug 24 15:30:26 2016:  snx11003n006  OSS        On           Started        1 / 1    snx11003n007  Local
#/

# Wait for 60 seconds before reporting the errors, so they can accumulate.
type= Single
continue=takenext
context = [CSCLI_NODES_LOG && !BAD_TGT_NUM]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d) \d+: snx(\d+)(n000)\s+MGMT.*snx(\d+)n001
desc= Unexpected number of Lustre targets $2 $3 $4
action= create BAD_TGT_NUM 60 (lcall %o -> ( sub { return $BAD_TGT_NUM_count; } ) ; if %o (report _THIS %cmd "%{subject}: Unexpected number of Lustre targets on %o OST(s) (NEW)" %list)) ;\
        lcall %o -> ( sub { $BAD_TGT_NUM_count = 0; } ) ;\
        add BAD_TGT_NUM System:      %site %host, %mf ;\
        add BAD_TGT_NUM Filesystem:  %{fs} ;\
        add BAD_TGT_NUM Event:       Unexpected number of Lustre targets on OSTs. (NEW) ;\
        add BAD_TGT_NUM Time:      $1 %Tmsg ;\
        add BAD_TGT_NUM %t  --  %tmsg ;\
        add BAD_TGT_NUM %{rule_info}lustre_targets.sr ;\
        add BAD_TGT_NUM %{N} ;\
        add BAD_TGT_NUM From log file: $+{_inputsrc}%{N} ;\
        add BAD_TGT_NUM %{N}


# Keep every error in $bad_tgt{}. The index is the Sonexion node
# name. The first time the error happens, the whole string is stored
# in %bad_tgt ($bad_tgt{$_[0] . $_[1]} = $_[4];) and the perl function
# returns 1; in that case, a new error is generated in the BAD_TGT_NUM
# context. When the error clears, it is removed (delete($bad_tgt{$_[0]
# . $_[1]}).
type= Single
context = [CSCLI_NODES_LOG]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d) \d+: snx(\d+)(n\d+)\s+\*?(MGMT|MGS|MDS|OSS).*(\d+) / (\d+)\s+snx
desc= Unexpected number of Lustre targets
action= lcall %o $2 $3 $5 $6 $0 -> ( sub { if ($_[2] == $_[3]) { \
                                           delete($bad_tgt{$_[0] . $_[1]}); \
                                           return 0; \
                                         } else { \
                                           if (exists($bad_tgt{$_[0] . $_[1]})) { \
                                             return 0; \
                                           } else { \
                                              $bad_tgt{$_[0] . $_[1]} = $_[4]; \
                                              return 1; \
                                           } \
                                      } } ) ;\
        if %o ( add BAD_TGT_NUM $0 ;\
                lcall %o -> ( sub { ++$BAD_TGT_NUM_count; } ))
