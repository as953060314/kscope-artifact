#/
# What is reported
# ~~~~~~~~~~~~~~~~
# Reports OSSes in a bad state
#
# Origin
# ~~~~~~
# **lmmon-aggregated.log**, which was generated from
# **lmmon-mount_report.log**, itself generated by
# */opt/xyratex/bin/cscli show_nodes*.
#
# Instances of logged strings
# ~~~~~~~~~~~~~~~~~~~~~~~~~~~
# ::
#
#   Thu Feb 14 18:23:12 2013: snx11003n118: OSS is in Stopped state instead of Started
#/

# Wait for 60 seconds before reporting the errors, so they can accumulate.
type= single
continue=takenext
context = [AGGREGATED_LOG && !BAD_OSS_STATE]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d) \d+: snx(\d+)(n\d+): OSS is in .+ state instead of Started
desc= Raid recovery
action= create BAD_OSS_STATE 60 (lcall %o -> (sub { $BAD_OSS_STATE_count; }) ; if %o (report _THIS %cmd "%{subject}: %o OSS(es) in bad state" %list)) ;\
        lcall %o -> ( sub { $BAD_OSS_STATE_count = 0; } ) ;\
        add BAD_OSS_STATE 1 day %wmsg ;\
        add BAD_OSS_STATE System:      %site %host, %mf ;\
        add BAD_OSS_STATE Filesystem:  %{fs} ;\
        add BAD_OSS_STATE Event:       Bad OSS state. ;\
        add BAD_OSS_STATE Time:      $1  %Tmsg ;\
        add BAD_OSS_STATE %t  --  %tmsg2 ;\
        add BAD_OSS_STATE %{rule_info}lustre_bad_oss.sr ;\
        if %urlsr ( add BAD_OSS_STATE %{urlsr}/lustre_bad_oss.sr.html ) ;\
        add BAD_OSS_STATE %{N} ;\
        add BAD_OSS_STATE From log file: $+{_inputsrc}%{N} ;\
        add BAD_OSS_STATE %{N}


type= SingleWithSuppress
context = [AGGREGATED_LOG && BAD_OSS_STATE]
ptype= RegExp
pattern= (\d\d:\d\d:\d\d) \d+: snx(\d+)(n\d+): (OSS is in )(.+)( state instead of Started)
desc= bad oss state $2 $3 $5
action= add BAD_OSS_STATE $1  $0 ;\
        lcall %o -> ( sub { ++$BAD_OSS_STATE_count; } )
window=86400
